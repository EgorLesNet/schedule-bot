import datetime
import pytz
import re
import os
import requests
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ß–¢–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê –ò–ó –§–ê–ô–õ–ê ===
def load_bot_token():
    try:
        with open("token.txt", "r", encoding="utf-8") as f:
            token = f.read().strip()
            if not token:
                raise ValueError("–§–∞–π–ª token.txt –ø—É—Å—Ç–æ–π")
            return token
    except FileNotFoundError:
        logging.error("‚ùå –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª token.txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        return None

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = load_bot_token()
if not BOT_TOKEN:
    exit(1)

ADMIN_USERNAME = "fusuges"

# URLs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
STREAM_URLS = {
    "1": "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/GAUGN_1_kurs_1_potok_nodups.ics",
    "2": "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/GAUGN_1_kurs_2_potok_nodups.ics"
}

TIMEZONE = pytz.timezone("Europe/Moscow")
HOMEWORKS_FILE = "homeworks.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
def load_homeworks():
    try:
        with open(HOMEWORKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_homeworks(homeworks):
    with open(HOMEWORKS_FILE, "w", encoding="utf-8") as f:
        json.dump(homeworks, f, ensure_ascii=False, indent=2)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
homeworks = load_homeworks()
events_cache = {}

# === –ü–ê–†–°–ò–ù–ì ICS –ò–ó GITHUB ===
def load_events_from_github(stream):
    if stream in events_cache:
        return events_cache[stream]
        
    events = []
    try:
        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream} –∏–∑ GitHub...")
        response = requests.get(STREAM_URLS[stream])
        response.raise_for_status()
        data = response.text
        
        for ev_block in data.split("BEGIN:VEVENT"):
            if "DTSTART" not in ev_block:
                continue
            try:
                start_str = re.search(r"DTSTART;TZID=Europe/Moscow:(\d{8}T\d{6})", ev_block).group(1)
                end_str = re.search(r"DTEND;TZID=Europe/Moscow:(\d{8}T\d{6})", ev_block).group(1)
                summary = re.search(r"SUMMARY:(.*)", ev_block).group(1).strip()
                desc_match = re.search(r"DESCRIPTION:(.*)", ev_block)
                desc = desc_match.group(1).strip() if desc_match else ""

                start = datetime.datetime.strptime(start_str, "%Y%m%dT%H%M%S")
                end = datetime.datetime.strptime(end_str, "%Y%m%dT%H%M%S")

                events.append({
                    "summary": summary,
                    "start": start,
                    "end": end,
                    "desc": desc
                })
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                continue
                
        events_cache[stream] = events
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream}")
        return events
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å GitHub: {e}")
        return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_unique_subjects(stream):
    events = load_events_from_github(stream)
    subjects = set()
    for event in events:
        subjects.add(event["summary"])
    return sorted(list(subjects))

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_week_range(date):
    start = date - datetime.timedelta(days=date.weekday())
    end = start + datetime.timedelta(days=6)
    return start, end

def is_online_class(ev):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –æ–Ω–ª–∞–π–Ω"""
    desc = ev.get("desc", "").lower()
    summary = ev.get("summary", "").lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-–ø–∞—Ä
    online_keywords = ["–æ–Ω–ª–∞–π–Ω", "online", "zoom", "teams", "–≤–µ–±–∏–Ω–∞—Ä", "webinar", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"]
    
    return any(keyword in desc or keyword in summary for keyword in online_keywords)

def has_only_lunch_break(events, date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤"""
    day_events = [e for e in events if e["start"].date() == date]
    
    if len(day_events) == 0:
        return False
    
    # –ï—Å–ª–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è - —ç—Ç–æ –æ–±–µ–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
    lunch_breaks = [e for e in day_events if "–æ–±–µ–¥" in e["summary"].lower() or "–ø–µ—Ä–µ—Ä—ã–≤" in e["summary"].lower()]
    return len(lunch_breaks) == len(day_events)

def format_event(ev, stream):
    desc = ev["desc"]
    teacher, room = "", ""
    if "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" in desc:
        teacher = desc.split("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:")[1].split("\\n")[0].strip()
    if "–ê—É–¥–∏—Ç–æ—Ä–∏—è" in desc:
        room = desc.split("–ê—É–¥–∏—Ç–æ—Ä–∏—è:")[1].split("\\n")[0].strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø–∞—Ä
    online_marker = " üíª" if is_online_class(ev) else ""
    
    line = f"{ev['start'].strftime('%H:%M')}‚Äì{ev['end'].strftime('%H:%M')}  {ev['summary']}{online_marker}"
    if teacher or room:
        line += "\n"
    if teacher:
        line += f"üë®‚Äçüè´ {teacher}"
    if room:
        line += f" | üìç{room}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    hw_key = f"{stream}_{ev['start'].date()}_{ev['summary']}"
    if hw_key in homeworks:
        line += f"\nüìö –î–ó: {homeworks[hw_key]}"
    
    return line

def events_for_day(events, date, english_time=None):
    day_events = [e for e in events if e["start"].date() == date]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    if date.weekday() == 3 and english_time:  # 3 = —á–µ—Ç–≤–µ—Ä–≥
        if english_time == "morning":
            start_time = datetime.datetime.combine(date, datetime.time(9, 0))
            end_time = datetime.datetime.combine(date, datetime.time(12, 10))
        else:  # afternoon
            start_time = datetime.datetime.combine(date, datetime.time(14, 0))
            end_time = datetime.datetime.combine(date, datetime.time(17, 10))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        has_english = any("–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in e["summary"].lower() for e in day_events)
        if not has_english:
            english_event = {
                "summary": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ üíª",
                "start": start_time,
                "end": end_time,
                "desc": "–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–µ"
            }
            day_events.append(english_event)
    
    return day_events

def format_day(date, events, stream, english_time=None, is_tomorrow=False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–±–µ–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
    if has_only_lunch_break(events, date):
        return f"üìÖ {date.strftime('%A, %d %B')} ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
    
    evs = events_for_day(events, date, english_time)
    
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_ru = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    months_ru = {
        'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
        'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
        'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
        'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
    }
    
    day_en = date.strftime('%A')
    month_en = date.strftime('%B')
    day_ru = days_ru.get(day_en, day_en)
    month_ru = months_ru.get(month_en, month_en)
    date_str = date.strftime(f'{day_ru}, %d {month_ru}')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É "–ó–∞–≤—Ç—Ä–∞" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    prefix = "üîÑ " if is_tomorrow else "üìÖ "
    if is_tomorrow:
        date_str = f"–ó–∞–≤—Ç—Ä–∞, {date_str}"
    
    if not evs:
        return f"{prefix}{date_str} ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
    
    text = f"{prefix}{date_str}:\n"
    for ev in sorted(evs, key=lambda x: x["start"]):
        text += f"‚Ä¢ {format_event(ev, stream)}\n\n"
    return text

def is_admin(update: Update):
    return update.effective_user.username == ADMIN_USERNAME

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö 1 –ø–æ—Ç–æ–∫", callback_data="select_stream_1")],
        [InlineKeyboardButton("üìö 2 –ø–æ—Ç–æ–∫", callback_data="select_stream_2")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ—Ç–æ–∫:",
        reply_markup=reply_markup
    )

async def select_english_time(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    keyboard = [
        [InlineKeyboardButton("üïò 9:00-12:10", callback_data=f"english_morning_{stream}")],
        [InlineKeyboardButton("üïë 14:00-17:10", callback_data=f"english_afternoon_{stream}")],
        [InlineKeyboardButton("‚ùå –ë–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ", callback_data=f"english_none_{stream}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —á–µ—Ç–≤–µ—Ä–≥:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —á–µ—Ç–≤–µ—Ä–≥:",
            reply_markup=reply_markup
        )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, stream, english_time=None):
    events = load_events_from_github(stream)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if english_time:
        context.user_data['english_time'] = english_time
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{stream}"),
         InlineKeyboardButton("üîÑ –ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{stream}")],
        [InlineKeyboardButton("üóì –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data=f"this_week_{stream}")],
        [InlineKeyboardButton("‚è≠ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=f"next_week_{stream}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"refresh_{stream}")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–ó –¥–ª—è –∞–¥–º–∏–Ω–∞
    if is_admin(update):
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–ó", callback_data=f"manage_hw_{stream}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    english_text = ""
    if english_time == "morning":
        english_text = "\nüïò –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: 9:00-12:10"
    elif english_time == "afternoon":
        english_text = "\nüïë –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: 14:00-17:10"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"–í—ã–±—Ä–∞–Ω {stream} –ø–æ—Ç–æ–∫{english_text}\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text=f"–í—ã–±—Ä–∞–Ω {stream} –ø–æ—Ç–æ–∫{english_text}\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('select_stream_'):
        stream = query.data.split('_')[-1]
        context.user_data['stream'] = stream
        await select_english_time(update, context, stream)
        return
        
    elif query.data.startswith('english_'):
        parts = query.data.split('_')
        english_option = parts[1]  # morning, afternoon, none
        stream = parts[2]
        
        english_time = None
        if english_option == "morning":
            english_time = "morning"
        elif english_option == "afternoon":
            english_time = "afternoon"
        # –¥–ª—è "none" –æ—Å—Ç–∞–≤–ª—è–µ–º english_time = None
        
        await show_main_menu(update, context, stream, english_time)
        return
        
    elif query.data.startswith('refresh_'):
        stream = query.data.split('_')[-1]
        if stream in events_cache:
            del events_cache[stream]
        events = load_events_from_github(stream)
        await query.edit_message_text(
            text=f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {stream} –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_stream_{stream}")]])
        )
        return
        
    elif query.data.startswith('manage_hw_'):
        stream = query.data.split('_')[-1]
        if not is_admin(update):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–ó")
            return
            
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data=f"add_hw_{stream}")],
            [InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –î–ó", callback_data=f"view_hw_{stream}")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –î–ó", callback_data=f"delete_hw_{stream}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_stream_{stream}")],
        ]
        await query.edit_message_text(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
        
    elif query.data.startswith('add_hw_'):
        stream = query.data.split('_')[-1]
        context.user_data['awaiting_hw_method'] = True
        context.user_data['hw_stream'] = stream
        
        keyboard = [
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data=f"select_subject_{stream}")],
            [InlineKeyboardButton("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_hw_{stream}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]
        ]
        
        await query.edit_message_text(
            text="–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
        
    elif query.data.startswith('select_subject_'):
        stream = query.data.split('_')[-1]
        subjects = get_unique_subjects(stream)
        
        if not subjects:
            await query.edit_message_text(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")]])
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        keyboard = []
        row = []
        for i, subject in enumerate(subjects):
            button_text = subject[:20] + "..." if len(subject) > 20 else subject
            row.append(InlineKeyboardButton(button_text, callback_data=f"subject_{stream}_{i}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
            
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")])
        
        context.user_data['subjects_list'] = subjects
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
        
    elif query.data.startswith('subject_'):
        stream = query.data.split('_')[-2]
        subject_index = int(query.data.split('_')[-1])
        
        subjects_list = context.user_data.get('subjects_list', [])
        if subject_index < len(subjects_list):
            selected_subject = subjects_list[subject_index]
            context.user_data['selected_subject'] = selected_subject
            context.user_data['awaiting_hw_date'] = True
            
            await query.edit_message_text(
                text=f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {selected_subject}\n\n"
                     f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:\n"
                     f"–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.datetime.now().strftime('%Y-%m-%d')}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_subject_{stream}")]])
            )
        return
        
    elif query.data.startswith('manual_hw_'):
        stream = query.data.split('_')[-1]
        context.user_data['awaiting_hw_manual'] = True
        context.user_data['hw_stream'] = stream
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                 "–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î) | –ü—Ä–µ–¥–º–µ—Ç | –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è\n\n"
                 "–ü—Ä–∏–º–µ—Ä: 2024-01-15 | –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ | –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 42",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")]])
        )
        return
        
    elif query.data.startswith('view_hw_'):
        stream = query.data.split('_')[-1]
        stream_homeworks = {k: v for k, v in homeworks.items() if k.startswith(f"{stream}_")}
        
        if not stream_homeworks:
            text = "–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç."
        else:
            text = "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            for key, hw_text in stream_homeworks.items():
                _, date, subject = key.split('_', 2)
                text += f"üìÖ {date} | {subject}\nüìñ {hw_text}\n\n"
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
        )
        return
        
    elif query.data.startswith('delete_hw_'):
        stream = query.data.split('_')[-1]
        stream_homeworks = {k: v for k, v in homeworks.items() if k.startswith(f"{stream}_")}
        
        if not stream_homeworks:
            await query.edit_message_text(
                text="–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
            )
            return
            
        keyboard = []
        for key in stream_homeworks.keys():
            _, date, subject = key.split('_', 2)
            keyboard.append([InlineKeyboardButton(
                f"{date} | {subject}", 
                callback_data=f"confirm_delete_{key}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")])
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –î–ó –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
        
    elif query.data.startswith('confirm_delete_'):
        hw_key = query.data.replace('confirm_delete_', '')
        if hw_key in homeworks:
            del homeworks[hw_key]
            save_homeworks(homeworks)
            await query.edit_message_text(
                text="‚úÖ –î–ó —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{hw_key.split('_')[0]}")]])
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if any(query.data.startswith(cmd) for cmd in ['today_', 'tomorrow_', 'this_week_', 'next_week_']):
        stream = query.data.split('_')[-1]
        today = datetime.datetime.now(TIMEZONE).date()
        events = load_events_from_github(stream)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        english_time = context.user_data.get('english_time')

        if query.data.startswith('today_'):
            text = format_day(today, events, stream, english_time)
            if "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text:
                text = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

        elif query.data.startswith('tomorrow_'):
            tomorrow = today + datetime.timedelta(days=1)
            text = format_day(tomorrow, events, stream, english_time, is_tomorrow=True)
            if "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text:
                text = f"üîÑ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

        elif query.data.startswith('this_week_'):
            start_date, _ = get_week_range(today)
            text = f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é ({stream} –ø–æ—Ç–æ–∫):\n\n"
            for i in range(5):
                d = start_date + datetime.timedelta(days=i)
                text += format_day(d, events, stream, english_time)

        elif query.data.startswith('next_week_'):
            start_date, _ = get_week_range(today + datetime.timedelta(days=7))
            text = f"‚è≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ({stream} –ø–æ—Ç–æ–∫):\n\n"
            for i in range(5):
                d = start_date + datetime.timedelta(days=i)
                text += format_day(d, events, stream, english_time)

        else:
            text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{stream}"),
             InlineKeyboardButton("üîÑ –ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{stream}")],
            [InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data=f"this_week_{stream}"),
             InlineKeyboardButton("‚è≠ –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f"next_week_{stream}")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"select_stream_{stream}")]
        ]
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram
        if len(text) > 4000:
            text = text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞)
    if context.user_data.get('awaiting_hw_date'):
        try:
            date_str = update.message.text.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.datetime.strptime(date_str, "%Y-%m-%d")
            
            stream = context.user_data.get('hw_stream')
            subject = context.user_data.get('selected_subject')
            
            context.user_data['hw_date'] = date_str
            context.user_data['awaiting_hw_text'] = True
            del context.user_data['awaiting_hw_date']
            
            await update.message.reply_text(
                f"–î–∞—Ç–∞: {date_str}\n"
                f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    elif context.user_data.get('awaiting_hw_text'):
        hw_text = update.message.text
        stream = context.user_data.get('hw_stream')
        subject = context.user_data.get('selected_subject')
        date_str = context.user_data.get('hw_date')
        
        hw_key = f"{stream}_{date_str}_{subject}"
        homeworks[hw_key] = hw_text
        save_homeworks(homeworks)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for key in ['hw_stream', 'selected_subject', 'hw_date', 'awaiting_hw_text', 'subjects_list']:
            if key in context.user_data:
                del context.user_data[key]
        
        await update.message.reply_text(
            f"‚úÖ –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"–î–∞—Ç–∞: {date_str}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {hw_text}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    elif context.user_data.get('awaiting_hw_manual') and is_admin(update):
        try:
            stream = context.user_data.get('hw_stream')
            parts = update.message.text.split('|')
            if len(parts) == 3:
                date_str = parts[0].strip()
                subject = parts[1].strip()
                hw_text = parts[2].strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                datetime.datetime.strptime(date_str, "%Y-%m-%d")
                
                hw_key = f"{stream}_{date_str}_{subject}"
                homeworks[hw_key] = hw_text
                save_homeworks(homeworks)
                
                del context.user_data['awaiting_hw_manual']
                del context.user_data['hw_stream']
                
                await update.message.reply_text(
                    f"‚úÖ –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                    f"–î–∞—Ç–∞: {date_str}\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {hw_text}",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î) | –ü—Ä–µ–¥–º–µ—Ç | –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è"
                )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# === –ó–ê–ü–£–°–ö ===
def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    global homeworks
    homeworks = load_homeworks()
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("=" * 50)
    print("ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
    print(f"üëë –ê–¥–º–∏–Ω: {ADMIN_USERNAME}")
    print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π: {len(homeworks)}")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    app.run_polling()

if __name__ == "__main__":
    main()
