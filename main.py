import datetime
import pytz
import re
import os
import requests
import json
import logging
import schedule
import time
import threading
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ß–¢–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê –ò–ó –§–ê–ô–õ–ê ===
def load_bot_token():
    try:
        with open("token.txt", "r", encoding="utf-8") as f:
            token = f.read().strip()
            if not token:
                raise ValueError("–§–∞–π–ª token.txt –ø—É—Å—Ç–æ–π")
            return token
    except FileNotFoundError:
        logging.error("‚ùå –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = load_bot_token()
if not BOT_TOKEN:
    exit(1)

ADMIN_USERNAME = "fusuges"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/main.py"

# URLs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
STREAM_URLS = {
    "1": "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/GAUGN_1_kurs_1_potok_nodups.ics",
    "2": "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/GAUGN_1_kurs_2_potok_nodups.ics"
}

TIMEZONE = pytz.timezone("Europe/Moscow")
HOMEWORKS_FILE = "homeworks.json"
USER_SETTINGS_FILE = "user_settings.json"
LAST_UPDATE_FILE = "last_update.txt"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
homeworks = {}
user_settings = {}
events_cache = {}
application = None

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ===
def load_homeworks():
    try:
        with open(HOMEWORKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_homeworks(homeworks_data):
    with open(HOMEWORKS_FILE, "w", encoding="utf-8") as f:
        json.dump(homeworks_data, f, ensure_ascii=False, indent=2)

def load_user_settings():
    try:
        with open(USER_SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_settings(settings_data):
    with open(USER_SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings_data, f, ensure_ascii=False, indent=2)

def load_last_update():
    try:
        with open(LAST_UPDATE_FILE, "r", encoding="utf-8") as f:
            return f.read().strip()
    except FileNotFoundError:
        return None

def save_last_update():
    with open(LAST_UPDATE_FILE, "w", encoding="utf-8") as f:
        f.write(datetime.datetime.now().isoformat())

# === –ü–ê–†–°–ò–ù–ì ICS –ò–ó GITHUB ===
def load_events_from_github(stream):
    if stream in events_cache:
        return events_cache[stream]
        
    events = []
    try:
        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream} –∏–∑ GitHub...")
        response = requests.get(STREAM_URLS[stream])
        response.raise_for_status()
        data = response.text
        
        for ev_block in data.split("BEGIN:VEVENT"):
            if "DTSTART" not in ev_block:
                continue
            try:
                start_str = re.search(r"DTSTART;TZID=Europe/Moscow:(\d{8}T\d{6})", ev_block).group(1)
                end_str = re.search(r"DTEND;TZID=Europe/Moscow:(\d{8}T\d{6})", ev_block).group(1)
                summary = re.search(r"SUMMARY:(.*)", ev_block).group(1).strip()
                desc_match = re.search(r"DESCRIPTION:(.*)", ev_block)
                desc = desc_match.group(1).strip() if desc_match else ""

                start = datetime.datetime.strptime(start_str, "%Y%m%dT%H%M%S")
                end = datetime.datetime.strptime(end_str, "%Y%m%dT%H%M%S")

                events.append({
                    "summary": summary,
                    "start": start,
                    "end": end,
                    "desc": desc
                })
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                continue
                
        events_cache[stream] = events
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream}")
        return events
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å GitHub: {e}")
        return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_unique_subjects(stream):
    events = load_events_from_github(stream)
    subjects = set()
    for event in events:
        subjects.add(event["summary"])
    return sorted(list(subjects))

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_week_range(date):
    start = date - datetime.timedelta(days=date.weekday())
    end = start + datetime.timedelta(days=6)
    return start, end

def is_online_class(ev):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –æ–Ω–ª–∞–π–Ω"""
    desc = ev.get("desc", "").lower()
    summary = ev.get("summary", "").lower()
    
    online_keywords = ["–æ–Ω–ª–∞–π–Ω", "online", "zoom", "teams", "–≤–µ–±–∏–Ω–∞—Ä", "webinar", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"]
    
    return any(keyword in desc or keyword in summary for keyword in online_keywords)

def has_only_lunch_break(events, date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤"""
    day_events = [e for e in events if e["start"].date() == date]
    
    if len(day_events) == 0:
        return False
    
    lunch_breaks = [e for e in day_events if "–æ–±–µ–¥" in e["summary"].lower() or "–ø–µ—Ä–µ—Ä—ã–≤" in e["summary"].lower()]
    return len(lunch_breaks) == len(day_events)

def format_event(ev, stream):
    desc = ev["desc"]
    teacher, room = "", ""
    if "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" in desc:
        teacher = desc.split("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:")[1].split("\\n")[0].strip()
    if "–ê—É–¥–∏—Ç–æ—Ä–∏—è" in desc:
        room = desc.split("–ê—É–¥–∏—Ç–æ—Ä–∏—è:")[1].split("\\n")[0].strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø–∞—Ä
    online_marker = " üíª" if is_online_class(ev) else ""
    
    line = f"{ev['start'].strftime('%H:%M')}‚Äì{ev['end'].strftime('%H:%M')}  {ev['summary']}{online_marker}"
    if teacher or room:
        line += "\n"
    if teacher:
        line += f"üë®‚Äçüè´ {teacher}"
    if room:
        line += f" | üìç{room}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    hw_key = f"{stream}_{ev['start'].date()}_{ev['summary']}"
    if hw_key in homeworks:
        line += f"\nüìö –î–ó: {homeworks[hw_key]}"
    
    return line

def events_for_day(events, date, english_time=None):
    day_events = [e for e in events if e["start"].date() == date]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    if date.weekday() == 3 and english_time:  # 3 = —á–µ—Ç–≤–µ—Ä–≥
        if english_time == "morning":
            start_time = datetime.datetime.combine(date, datetime.time(9, 0))
            end_time = datetime.datetime.combine(date, datetime.time(12, 10))
        else:  # afternoon
            start_time = datetime.datetime.combine(date, datetime.time(14, 0))
            end_time = datetime.datetime.combine(date, datetime.time(17, 10))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        has_english = any("–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in e["summary"].lower() for e in day_events)
        if not has_english:
            english_event = {
                "summary": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ üíª",
                "start": start_time,
                "end": end_time,
                "desc": "–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–µ"
            }
            day_events.append(english_event)
    
    return day_events

def format_day(date, events, stream, english_time=None, is_tomorrow=False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–±–µ–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
    if has_only_lunch_break(events, date):
        return f"üìÖ {date.strftime('%A, %d %B')} ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
    
    evs = events_for_day(events, date, english_time)
    
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_ru = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—åe'
    }
    
    months_ru = {
        'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
        'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
        'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
        'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
    }
    
    day_en = date.strftime('%A')
    month_en = date.strftime('%B')
    day_ru = days_ru.get(day_en, day_en)
    month_ru = months_ru.get(month_en, month_en)
    date_str = date.strftime(f'{day_ru}, %d {month_ru}')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É "–ó–∞–≤—Ç—Ä–∞" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    prefix = "üîÑ " if is_tomorrow else "üìÖ "
    if is_tomorrow:
        date_str = f"–ó–∞–≤—Ç—Ä–∞, {date_str}"
    
    if not evs:
        return f"{prefix}{date_str} ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
    
    text = f"{prefix}{date_str}:\n"
    for ev in sorted(evs, key=lambda x: x["start"]):
        text += f"‚Ä¢ {format_event(ev, stream)}\n\n"
    return text

def is_admin(update: Update):
    return update.effective_user.username == ADMIN_USERNAME

def get_homeworks_for_tomorrow(stream):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = datetime.datetime.now(TIMEZONE).date() + datetime.timedelta(days=1)
    tomorrow_homeworks = []
    
    for hw_key, hw_text in homeworks.items():
        if hw_key.startswith(f"{stream}_"):
            try:
                hw_date_str = hw_key.split('_')[1]
                hw_date = datetime.datetime.strptime(hw_date_str, "%Y-%m-%d").date()
                if hw_date == tomorrow:
                    subject = hw_key.split('_', 2)[2]
                    tomorrow_homeworks.append((subject, hw_text))
            except (ValueError, IndexError):
                continue
    
    return tomorrow_homeworks

async def send_homework_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö"""
    if not application:
        return
        
    logging.info("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –î–ó...")
    
    for user_id, settings in user_settings.items():
        try:
            if settings.get('reminders', False) and settings.get('stream'):
                stream = settings['stream']
                tomorrow_hws = get_homeworks_for_tomorrow(stream)
                
                if tomorrow_hws:
                    message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
                    for subject, hw_text in tomorrow_hws:
                        message += f"üìñ {subject}:\n{hw_text}\n\n"
                    
                    await application.bot.send_message(chat_id=user_id, text=message)
                    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def check_for_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ GitHub"""
    try:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ GitHub...")
        response = requests.get(GITHUB_RAW_URL)
        if response.status_code == 200:
            new_content = response.text
            with open(__file__, "r", encoding="utf-8") as f:
                current_content = f.read()
            
            if new_content != current_content:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                with open(__file__, "w", encoding="utf-8") as f:
                    f.write(new_content)
                
                save_last_update()
                logging.info("‚úÖ –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏!")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                if application:
                    await application.bot.send_message(
                        chat_id=ADMIN_USERNAME,
                        text="‚úÖ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ GitHub!"
                    )
            else:
                logging.info("üì≠ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –î–ó –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
    schedule.every().day.at("20:00").do(
        lambda: asyncio.run(send_homework_reminders())
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
    schedule.every().day.at("09:00").do(
        lambda: asyncio.run(check_for_updates())
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(check_for_updates())
    
    while True:
        schedule.run_pending()
        time.sleep(60)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö 1 –ø–æ—Ç–æ–∫", callback_data="select_stream_1")],
        [InlineKeyboardButton("üìö 2 –ø–æ—Ç–æ–∫", callback_data="select_stream_2")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ—Ç–æ–∫:",
        reply_markup=reply_markup
    )

async def select_english_time(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    keyboard = [
        [InlineKeyboardButton("üïò 9:00-12:10", callback_data=f"english_morning_{stream}")],
        [InlineKeyboardButton("üïë 14:00-17:10", callback_data=f"english_afternoon_{stream}")],
        [InlineKeyboardButton("‚ùå –ë–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ", callback_data=f"english_none_{stream}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —á–µ—Ç–≤–µ—Ä–≥:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —á–µ—Ç–≤–µ—Ä–≥:",
            reply_markup=reply_markup
        )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, stream, english_time=None):
    events = load_events_from_github(stream)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(update.effective_user.id)
    if user_id not in user_settings:
        user_settings[user_id] = {}
    
    user_settings[user_id]['stream'] = stream
    if english_time:
        user_settings[user_id]['english_time'] = english_time
    save_user_settings(user_settings)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{stream}"),
         InlineKeyboardButton("üîÑ –ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{stream}")],
        [InlineKeyboardButton("üóì –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data=f"this_week_{stream}"),
         InlineKeyboardButton("‚è≠ –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f"next_week_{stream}")],
        [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_{stream}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"refresh_{stream}")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–ó –¥–ª—è –∞–¥–º–∏–Ω–∞
    if is_admin(update):
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–ó", callback_data=f"manage_hw_{stream}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    english_text = ""
    if english_time == "morning":
        english_text = "\nüïò –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: 9:00-12:10"
    elif english_time == "afternoon":
        english_text = "\nüïë –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: 14:00-17:10"
    
    reminders_status = "üîî" if user_settings[user_id].get('reminders', False) else "üîï"
    reminders_text = f"\n{reminders_status} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–≤–∫–ª' if user_settings[user_id].get('reminders', False) else '–≤—ã–∫–ª'}"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"–í—ã–±—Ä–∞–Ω {stream} –ø–æ—Ç–æ–∫{english_text}{reminders_text}\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text=f"–í—ã–±—Ä–∞–Ω {stream} –ø–æ—Ç–æ–∫{english_text}{reminders_text}\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def show_reminders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    user_id = str(update.effective_user.id)
    current_status = user_settings.get(user_id, {}).get('reminders', False)
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if current_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    status_icon = "üîî" if current_status else "üîï"
    
    keyboard = [
        [InlineKeyboardButton(f"{status_icon} –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_on_{stream}")],
        [InlineKeyboardButton(f"{status_icon} –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_off_{stream}")],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data=f"view_tomorrow_hw_{stream}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_stream_{stream}")]
    ]
    
    await update.callback_query.edit_message_text(
        text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n\n"
             f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_icon} {status_text}\n\n"
             f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
             f"–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('select_stream_'):
        stream = query.data.split('_')[-1]
        context.user_data['stream'] = stream
        await select_english_time(update, context, stream)
        return
        
    elif query.data.startswith('english_'):
        parts = query.data.split('_')
        english_option = parts[1]  # morning, afternoon, none
        stream = parts[2]
        
        english_time = None
        if english_option == "morning":
            english_time = "morning"
        elif english_option == "afternoon":
            english_time = "afternoon"
        # –¥–ª—è "none" –æ—Å—Ç–∞–≤–ª—è–µ–º english_time = None
        
        await show_main_menu(update, context, stream, english_time)
        return
        
    elif query.data.startswith('reminders_'):
        stream = query.data.split('_')[-1]
        
        if query.data.startswith('reminders_on_'):
            user_id = str(update.effective_user.id)
            if user_id not in user_settings:
                user_settings[user_id] = {}
            user_settings[user_id]['reminders'] = True
            save_user_settings(user_settings)
            await query.edit_message_text(
                text="‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –î–ó –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"reminders_{stream}")]])
            )
            return
            
        elif query.data.startswith('reminders_off_'):
            user_id = str(update.effective_user.id)
            if user_id not in user_settings:
                user_settings[user_id] = {}
            user_settings[user_id]['reminders'] = False
            save_user_settings(user_settings)
            await query.edit_message_text(
                text="üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"reminders_{stream}")]])
            )
            return
            
        elif query.data.startswith('view_tomorrow_hw_'):
            stream = query.data.split('_')[-1]
            tomorrow_hws = get_homeworks_for_tomorrow(stream)
            
            if not tomorrow_hws:
                text = "üì≠ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"
            else:
                text = "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
                for subject, hw_text in tomorrow_hws:
                    text += f"üìñ {subject}:\n{hw_text}\n\n"
            
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"reminders_{stream}")]])
            )
            return
            
        else:
            await show_reminders_menu(update, context, stream)
            return
        
    elif query.data.startswith('refresh_'):
        stream = query.data.split('_')[-1]
        if stream in events_cache:
            del events_cache[stream]
        events = load_events_from_github(stream)
        await query.edit_message_text(
            text=f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {stream} –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_stream_{stream}")]])
        )
        return
        
    elif query.data.startswith('manage_hw_'):
        stream = query.data.split('_')[-1]
        if not is_admin(update):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–ó")
            return
            
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data=f"add_hw_{stream}")],
            [InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –î–ó", callback_data=f"view_hw_{stream}")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –î–ó", callback_data=f"delete_hw_{stream}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_stream_{stream}")],
        ]
        await query.edit_message_text(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if any(query.data.startswith(cmd) for cmd in ['today_', 'tomorrow_', 'this_week_', 'next_week_']):
        stream = query.data.split('_')[-1]
        today = datetime.datetime.now(TIMEZONE).date()
        events = load_events_from_github(stream)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        user_id = str(update.effective_user.id)
        english_time = user_settings.get(user_id, {}).get('english_time')

        if query.data.startswith('today_'):
            text = format_day(today, events, stream, english_time)
            if "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text:
                text = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

        elif query.data.startswith('tomorrow_'):
            tomorrow = today + datetime.timedelta(days=1)
            text = format_day(tomorrow, events, stream, english_time, is_tomorrow=True)
            if "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text:
                text = f"üîÑ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

        elif query.data.startswith('this_week_'):
            start_date, _ = get_week_range(today)
            text = f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é ({stream} –ø–æ—Ç–æ–∫):\n\n"
            for i in range(5):
                d = start_date + datetime.timedelta(days=i)
                text += format_day(d, events, stream, english_time)

        elif query.data.startswith('next_week_'):
            start_date, _ = get_week_range(today + datetime.timedelta(days=7))
            text = f"‚è≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ({stream} –ø–æ—Ç–æ–∫):\n\n"
            for i in range(5):
                d = start_date + datetime.timedelta(days=i)
                text += format_day(d, events, stream, english_time)

        else:
            text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{stream}"),
             InlineKeyboardButton("üîÑ –ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{stream}")],
            [InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data=f"this_week_{stream}"),
             InlineKeyboardButton("‚è≠ –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f"next_week_{stream}")],
            [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_{stream}")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"select_stream_{stream}")]
        ]
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram
        if len(text) > 4000:
            text = text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def check_updates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    if not is_admin(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
        
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    await check_for_updates()
    await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# === –ó–ê–ü–£–°–ö ===
def main():
    global homeworks, user_settings, application
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    homeworks = load_homeworks()
    user_settings = load_user_settings()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("update", check_updates_command))
    application.add_handler(CallbackQueryHandler(handle_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: asyncio.run(handle_message(update, context))))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("=" * 50)
    print("ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
    print(f"üëë –ê–¥–º–∏–Ω: {ADMIN_USERNAME}")
    print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π: {len(homeworks)}")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {sum(1 for s in user_settings.values() if s.get('reminders', False))}")
    print("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00")
    print("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–¥–µ—Å—å
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()
