import datetime
import pytz
import re
import os
import requests
import json
import logging
import time
import threading
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ß–¢–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê –ò–ó –§–ê–ô–õ–ê ===
def load_bot_token():
    try:
        with open("token.txt", "r", encoding="utf-8") as f:
            token = f.read().strip()
            if not token:
                raise ValueError("–§–∞–π–ª token.txt –ø—É—Å—Ç–æ–π")
            return token
    except FileNotFoundError:
        logging.error("‚ùå –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = load_bot_token()
if not BOT_TOKEN:
    exit(1)

ADMIN_USERNAME = "fusuges"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/main.py"

# URLs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
STREAM_URLS = {
    "1": "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/GAUGN_1_kurs_1_potok_nodups.ics",
    "2": "https://raw.githubusercontent.com/EgorLesNet/schedule-bot/main/GAUGN_1_kurs_2_potok_nodups.ics"
}

TIMEZONE = pytz.timezone("Europe/Moscow")
USER_SETTINGS_FILE = "user_settings.json"
LAST_UPDATE_FILE = "last_update.txt"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_settings = {}
events_cache = {}
application = None

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ===
def load_homeworks(stream):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    filename = f"homeworks{stream}.json"
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_homeworks(stream, homeworks_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    filename = f"homeworks{stream}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(homeworks_data, f, ensure_ascii=False, indent=2)

def load_user_settings():
    try:
        with open(USER_SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_settings(settings_data):
    with open(USER_SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings_data, f, ensure_ascii=False, indent=2)

def load_last_update():
    try:
        with open(LAST_UPDATE_FILE, "r", encoding="utf-8") as f:
            return f.read().strip()
    except FileNotFoundError:
        return None

def save_last_update():
    with open(LAST_UPDATE_FILE, "w", encoding="utf-8") as f:
        f.write(datetime.datetime.now().isoformat())

# === –ü–ê–†–°–ò–ù–ì ICS –ò–ó GITHUB ===
def load_events_from_github(stream):
    if stream in events_cache:
        return events_cache[stream]
        
    events = []
    try:
        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream} –∏–∑ GitHub...")
        response = requests.get(STREAM_URLS[stream])
        response.raise_for_status()
        data = response.text
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        event_blocks = data.split('BEGIN:VEVENT')
        
        for block in event_blocks:
            if 'END:VEVENT' not in block:
                continue
                
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–∞ —Å–æ–±—ã—Ç–∏—è
                summary_match = re.search(r'SUMMARY:(.+?)(?:\r\n|\n|$)', block)
                dtstart_match = re.search(r'DTSTART(?:;VALUE=DATE-TIME)?(?:;TZID=Europe/Moscow)?:(\d{8}T\d{6})', block)
                dtend_match = re.search(r'DTEND(?:;VALUE=DATE-TIME)?(?:;TZID=Europe/Moscow)?:(\d{8}T\d{6})', block)
                description_match = re.search(r'DESCRIPTION:(.+?)(?:\r\n|\n|$)', block, re.DOTALL)
                
                if not all([summary_match, dtstart_match, dtend_match]):
                    continue
                
                summary = summary_match.group(1).strip()
                start_str = dtstart_match.group(1)
                end_str = dtend_match.group(1)
                description = description_match.group(1).strip() if description_match else ""
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                start_dt = datetime.datetime.strptime(start_str, '%Y%m%dT%H%M%S')
                end_dt = datetime.datetime.strptime(end_str, '%Y%m%dT%H%M%S')
                
                # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                start_dt = TIMEZONE.localize(start_dt)
                end_dt = TIMEZONE.localize(end_dt)
                
                events.append({
                    'summary': summary,
                    'start': start_dt,
                    'end': end_dt,
                    'desc': description
                })
                
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
                continue
                
        events_cache[stream] = events
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream}")
        return events
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å GitHub: {e}")
        return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_unique_subjects(stream):
    events = load_events_from_github(stream)
    subjects = set()
    for event in events:
        subjects.add(event["summary"])
    return sorted(list(subjects))

def get_subject_dates(stream, subject):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    events = load_events_from_github(stream)
    dates = []
    for event in events:
        if event["summary"] == subject:
            dates.append(event["start"].date())
    return sorted(dates)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_week_range(date):
    start = date - datetime.timedelta(days=date.weekday())
    end = start + datetime.timedelta(days=6)
    return start, end

def is_online_class(ev):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –æ–Ω–ª–∞–π–Ω"""
    desc = ev.get("desc", "").lower()
    summary = ev.get("summary", "").lower()
    
    online_keywords = ["–æ–Ω–ª–∞–π–Ω", "online", "zoom", "teams", "–≤–µ–±–∏–Ω–∞—Ä", "webinar", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"]
    
    return any(keyword in desc or keyword in summary for keyword in online_keywords)

def has_only_lunch_break(events, date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤"""
    day_events = [e for e in events if e["start"].date() == date]
    
    if len(day_events) == 0:
        return False
    
    lunch_breaks = [e for e in day_events if "–æ–±–µ–¥" in e["summary"].lower() or "–ø–µ—Ä–µ—Ä—ã–≤" in e["summary"].lower()]
    return len(lunch_breaks) == len(day_events)

def format_event(ev, stream):
    desc = ev["desc"]
    teacher, room = "", ""
    
    # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" in desc:
        teacher_match = re.search(r"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:\s*([^\\\n]+)", desc)
        if teacher_match:
            teacher = teacher_match.group(1).strip()
    
    if "–ê—É–¥–∏—Ç–æ—Ä–∏—è" in desc:
        room_match = re.search(r"–ê—É–¥–∏—Ç–æ—Ä–∏—è:\s*([^\\\n]+)", desc)
        if room_match:
            room = room_match.group(1).strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø–∞—Ä
    online_marker = " üíª" if is_online_class(ev) else ""
    
    line = f"{ev['start'].strftime('%H:%M')}‚Äì{ev['end'].strftime('%H:%M')}  {ev['summary']}{online_marker}"
    if teacher or room:
        line += "\n"
    if teacher:
        line += f"üë®‚Äçüè´ {teacher}"
    if room:
        line += f" | üìç{room}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    date_str = ev['start'].date().isoformat()
    hw_key = f"{ev['summary']}|{date_str}"
    homeworks = load_homeworks(stream)
    
    if hw_key in homeworks:
        line += f"\nüìö –î–ó: {homeworks[hw_key]}"
    
    return line

def events_for_day(events, date, english_time=None):
    day_events = [e for e in events if e["start"].date() == date]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    if date.weekday() == 3 and english_time:  # 3 = —á–µ—Ç–≤–µ—Ä–≥
        if english_time == "morning":
            start_time = TIMEZONE.localize(datetime.datetime.combine(date, datetime.time(9, 0)))
            end_time = TIMEZONE.localize(datetime.datetime.combine(date, datetime.time(12, 10)))
        else:  # afternoon
            start_time = TIMEZONE.localize(datetime.datetime.combine(date, datetime.time(14, 0)))
            end_time = TIMEZONE.localize(datetime.datetime.combine(date, datetime.time(17, 10)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        has_english = any("–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in e["summary"].lower() for e in day_events)
        if not has_english:
            english_event = {
                "summary": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ üíª",
                "start": start_time,
                "end": end_time,
                "desc": "–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–µ"
            }
            day_events.append(english_event)
    
    return day_events

def format_day(date, events, stream, english_time=None, is_tomorrow=False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–±–µ–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
    if has_only_lunch_break(events, date):
        return f"üìÖ {date.strftime('%A, %d %B')} ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
    
    evs = events_for_day(events, date, english_time)
    
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_ru = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    months_ru = {
        'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
        'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
        'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
        'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
    }
    
    day_en = date.strftime('%A')
    month_en = date.strftime('%B')
    day_ru = days_ru.get(day_en, day_en)
    month_ru = months_ru.get(month_en, month_en)
    date_str = date.strftime(f'{day_ru}, %d {month_ru}')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É "–ó–∞–≤—Ç—Ä–∞" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    prefix = "üîÑ " if is_tomorrow else "üìÖ "
    if is_tomorrow:
        date_str = f"–ó–∞–≤—Ç—Ä–∞, {date_str}"
    
    if not evs:
        return f"{prefix}{date_str} ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
    
    text = f"{prefix}{date_str}:\n"
    for ev in sorted(evs, key=lambda x: x["start"]):
        text += f"‚Ä¢ {format_event(ev, stream)}\n\n"
    return text

def is_admin(update: Update):
    return update.effective_user.username == ADMIN_USERNAME

def get_homeworks_for_tomorrow(stream):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = datetime.datetime.now(TIMEZONE).date() + datetime.timedelta(days=1)
    tomorrow_homeworks = []
    homeworks = load_homeworks(stream)
    
    for hw_key, hw_text in homeworks.items():
        try:
            # –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: –ø—Ä–µ–¥–º–µ—Ç|–¥–∞—Ç–∞
            parts = hw_key.split('|')
            if len(parts) != 2:
                continue
                
            subject = parts[0]
            date_str = parts[1]
            hw_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
            if hw_date == tomorrow:
                tomorrow_homeworks.append((subject, hw_text))
        except (ValueError, IndexError):
            continue
    
    return tomorrow_homeworks

def find_similar_events_across_streams(date, subject, start_time, end_time):
    """–ù–∞—Ö–æ–¥–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä—ã –≤ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
    similar_events = []
    
    for stream in ["1", "2"]:
        events = load_events_from_github(stream)
        for event in events:
            if (event["start"].date() == date and 
                event["summary"] == subject and
                event["start"].time() == start_time and
                event["end"].time() == end_time):
                similar_events.append((stream, event))
    
    return similar_events

def add_homework_for_both_streams(date, subject, homework_text, current_stream):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –î–ó –¥–ª—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä—ã –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è"""
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è
    current_events = load_events_from_github(current_stream)
    current_event = None
    
    for event in current_events:
        if (event["start"].date() == date and 
            event["summary"] == subject):
            current_event = event
            break
    
    if not current_event:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–∏–π
        hw_key = f"{subject}|{date}"
        homeworks = load_homeworks(current_stream)
        homeworks[hw_key] = homework_text
        save_homeworks(current_stream, homeworks)
        return [current_stream]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    start_time = current_event["start"].time()
    end_time = current_event["end"].time()
    
    # –ò—â–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö
    similar_events = find_similar_events_across_streams(date, subject, start_time, end_time)
    added_for_streams = []
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –î–ó –¥–ª—è –æ–±–æ–∏—Ö
    if len(similar_events) == 2:
        for stream, event in similar_events:
            hw_key = f"{subject}|{date}"
            homeworks = load_homeworks(stream)
            homeworks[hw_key] = homework_text
            save_homeworks(stream, homeworks)
            added_for_streams.append(stream)
    else:
        # –ï—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
        hw_key = f"{subject}|{date}"
        homeworks = load_homeworks(current_stream)
        homeworks[hw_key] = homework_text
        save_homeworks(current_stream, homeworks)
        added_for_streams.append(current_stream)
    
    return added_for_streams

def get_user_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    total_users = len(user_settings)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ç–æ–∫–∞–º
    stream_stats = {"1": 0, "2": 0}
    reminders_stats = {"enabled": 0, "disabled": 0}
    english_time_stats = {"morning": 0, "afternoon": 0, "none": 0}
    
    for user_id, settings in user_settings.items():
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
        stream = settings.get('stream')
        if stream in stream_stats:
            stream_stats[stream] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if settings.get('reminders', False):
            reminders_stats["enabled"] += 1
        else:
            reminders_stats["disabled"] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        english_time = settings.get('english_time')
        if english_time == "morning":
            english_time_stats["morning"] += 1
        elif english_time == "afternoon":
            english_time_stats["afternoon"] += 1
        else:
            english_time_stats["none"] += 1
    
    return {
        "total_users": total_users,
        "stream_stats": stream_stats,
        "reminders_stats": reminders_stats,
        "english_time_stats": english_time_stats
    }

async def send_homework_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö"""
    if not application:
        return
        
    logging.info("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –î–ó...")
    
    for user_id, settings in user_settings.items():
        try:
            if settings.get('reminders', False) and settings.get('stream'):
                stream = settings['stream']
                tomorrow_hws = get_homeworks_for_tomorrow(stream)
                
                if tomorrow_hws:
                    message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
                    for subject, hw_text in tomorrow_hws:
                        message += f"üìñ {subject}:\n{hw_text}\n\n"
                    
                    await application.bot.send_message(chat_id=user_id, text=message)
                    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def check_for_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ GitHub"""
    try:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ GitHub...")
        response = requests.get(GITHUB_RAW_URL)
        if response.status_code == 200:
            new_content = response.text
            with open(__file__, "r", encoding="utf-8") as f:
                current_content = f.read()
            
            if new_content != current_content:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                with open(__file__, "w", encoding="utf-8") as f:
                    f.write(new_content)
                
                save_last_update()
                logging.info("‚úÖ –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏!")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                if application:
                    await application.bot.send_message(
                        chat_id=ADMIN_USERNAME,
                        text="‚úÖ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ GitHub!"
                    )
            else:
                logging.info("üì≠ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

async def scheduler():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    while True:
        now = datetime.datetime.now(TIMEZONE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, 20:00 –ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if now.hour == 20 and now.minute == 0:
            await send_homework_reminders()
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, 09:00 –ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        elif now.hour == 9 and now.minute == 0:
            await check_for_updates()
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        
        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(30)

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö 1 –ø–æ—Ç–æ–∫", callback_data="select_stream_1")],
        [InlineKeyboardButton("üìö 2 –ø–æ—Ç–æ–∫", callback_data="select_stream_2")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ—Ç–æ–∫:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

async def select_english_time(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    keyboard = [
        [InlineKeyboardButton("üïò 9:00-12:10", callback_data=f"english_morning_{stream}")],
        [InlineKeyboardButton("üïë 14:00-17:10", callback_data=f"english_afternoon_{stream}")],
        [InlineKeyboardButton("‚ùå –ë–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ", callback_data=f"english_none_{stream}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —á–µ—Ç–≤–µ—Ä–≥:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —á–µ—Ç–≤–µ—Ä–≥:",
            reply_markup=reply_markup
        )

async def select_reminders_time(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("üïó 20:00", callback_data=f"reminders_time_20:00_{stream}")],
        [InlineKeyboardButton("üïò 21:00", callback_data=f"reminders_time_21:00_{stream}")],
        [InlineKeyboardButton("üïô 22:00", callback_data=f"reminders_time_22:00_{stream}")],
        [InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_off_{stream}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö:",
        reply_markup=reply_markup
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, stream, english_time=None):
    events = load_events_from_github(stream)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(update.effective_user.id)
    if user_id not in user_settings:
        user_settings[user_id] = {}
    
    user_settings[user_id]['stream'] = stream
    if english_time:
        user_settings[user_id]['english_time'] = english_time
    save_user_settings(user_settings)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{stream}"),
         InlineKeyboardButton("üîÑ –ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{stream}")],
        [InlineKeyboardButton("üóì –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data=f"this_week_{stream}"),
         InlineKeyboardButton("‚è≠ –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f"next_week_{stream}")],
        [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data=f"reminders_settings_{stream}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"refresh_{stream}")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–ó –¥–ª—è –∞–¥–º–∏–Ω–∞
    if is_admin(update):
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–ó", callback_data=f"manage_hw_{stream}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    english_text = ""
    if english_time == "morning":
        english_text = "\nüïò –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: 9:00-12:10"
    elif english_time == "afternoon":
        english_text = "\nüïë –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: 14:00-17:10"
    
    reminders_status = "üîî" if user_settings[user_id].get('reminders', False) else "üîï"
    reminders_time = user_settings[user_id].get('reminders_time', '20:00')
    reminders_text = f"\n{reminders_status} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–≤–∫–ª' if user_settings[user_id].get('reminders', False) else '–≤—ã–∫–ª'}"
    if user_settings[user_id].get('reminders', False):
        reminders_text += f" ({reminders_time})"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"–í—ã–±—Ä–∞–Ω {stream} –ø–æ—Ç–æ–∫{english_text}{reminders_text}\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text=f"–í—ã–±—Ä–∞–Ω {stream} –ø–æ—Ç–æ–∫{english_text}{reminders_text}\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def show_reminders_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    user_id = str(update.effective_user.id)
    current_status = user_settings.get(user_id, {}).get('reminders', False)
    current_time = user_settings.get(user_id, {}).get('reminders_time', '20:00')
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if current_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    status_icon = "üîî" if current_status else "üîï"
    
    keyboard = [
        [InlineKeyboardButton(f"{status_icon} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data=f"set_reminders_time_{stream}")],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data=f"view_tomorrow_hw_{stream}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main_{stream}")]
    ]
    
    await update.callback_query.edit_message_text(
        text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
             f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_icon} {status_text}\n"
             f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {current_time}\n\n"
             f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
             f"–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_manage_hw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    if not is_admin(update):
        await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–ó")
        return
        
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data=f"add_hw_{stream}")],
        [InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –î–ó", callback_data=f"view_all_hw_{stream}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –î–ó", callback_data=f"delete_hw_menu_{stream}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main_{stream}")],
    ]
    
    await update.callback_query.edit_message_text(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏:\n\n"
             "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –î–ó –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ —É –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –µ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –ø–∞—Ä—ã "
             "–≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è, –î–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –¥–ª—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_add_hw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    subjects = get_unique_subjects(stream)
    
    if not subjects:
        await update.callback_query.edit_message_text(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    keyboard = []
    for subject in subjects:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        display_name = subject[:30] + "..." if len(subject) > 30 else subject
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è callback_data
        safe_subject = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø]', '_', subject)
        safe_subject = safe_subject[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        callback_data = f"hw_subj_{stream}_{safe_subject}"
        
        keyboard.append([InlineKeyboardButton(f"üìö {display_name}", callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")])
    
    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, stream, subject):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
    dates = get_subject_dates(stream, subject)
    today = datetime.datetime.now(TIMEZONE).date()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
    future_dates = [d for d in dates if d >= today]
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–∞—Ç
    for date in future_dates[:5]:
        date_str = date.strftime("%d.%m.%Y")
        callback_data = f"hw_date_{stream}_{date.isoformat()}"
        keyboard.append([InlineKeyboardButton(f"üìÖ {date_str}", callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    keyboard.append([InlineKeyboardButton("üìÜ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data=f"hw_date_manual_{stream}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")])
    
    await update.callback_query.edit_message_text(
        text=f"–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}':",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_delete_hw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –î–ó"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –î–ó –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    homeworks = load_homeworks(stream)
    
    if not homeworks:
        await update.callback_query.edit_message_text(
            text="üì≠ –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –î–ó –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = []
    for hw_key, hw_text in list(homeworks.items())[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        parts = hw_key.split('|')
        if len(parts) != 2:
            continue
            
        subject = parts[0]
        date_str = parts[1]
        
        try:
            date = datetime.datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
            display_text = f"üóë {date} - {subject[:20]}..."
            callback_data = f"del_hw_{stream}_{hw_key}"
            keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
        except:
            continue
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")])
    
    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_all_homeworks(update: Update, context: ContextTypes.DEFAULT_TYPE, stream):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    homeworks = load_homeworks(stream)
    
    if not homeworks:
        await update.callback_query.edit_message_text(
            text="üì≠ –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –î–ó –ø–æ –¥–∞—Ç–µ
    homeworks_by_date = {}
    for hw_key, hw_text in homeworks.items():
        parts = hw_key.split('|')
        if len(parts) != 2:
            continue
            
        subject = parts[0]
        date_str = parts[1]
        
        if date_str not in homeworks_by_date:
            homeworks_by_date[date_str] = []
        
        homeworks_by_date[date_str].append((subject, hw_text))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üìö –í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    
    for date_str in sorted(homeworks_by_date.keys()):
        try:
            date = datetime.datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
            message += f"üìÖ {date}:\n"
            
            for subject, hw_text in homeworks_by_date[date_str]:
                message += f"üìñ {subject}:\n{hw_text}\n\n"
        except:
            continue
    
    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4000:
        message = message[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
    )

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    stats = get_user_stats()
    
    message = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n\n"
        f"üìö –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ç–æ–∫–∞–º:\n"
        f"‚Ä¢ 1 –ø–æ—Ç–æ–∫: {stats['stream_stats']['1']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ 2 –ø–æ—Ç–æ–∫: {stats['stream_stats']['2']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        f"‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {stats['reminders_stats']['enabled']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –í—ã–∫–ª—é—á–µ–Ω—ã: {stats['reminders_stats']['disabled']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"üïò –í—Ä–µ–º—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:\n"
        f"‚Ä¢ –£—Ç—Ä–æ (9:00-12:10): {stats['english_time_stats']['morning']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –î–µ–Ω—å (14:00-17:10): {stats['english_time_stats']['afternoon']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –ë–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {stats['english_time_stats']['none']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    await update.message.reply_text(message)

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data
        
        if data.startswith('select_stream_'):
            stream = data.split('_')[-1]
            context.user_data['stream'] = stream
            await select_english_time(update, context, stream)
            
        elif data.startswith('english_'):
            parts = data.split('_')
            english_option = parts[1]  # morning, afternoon, none
            stream = parts[2]
            
            english_time = None
            if english_option == "morning":
                english_time = "morning"
            elif english_option == "afternoon":
                english_time = "afternoon"
            
            await show_main_menu(update, context, stream, english_time)
            
        elif data.startswith('back_to_main_'):
            stream = data.split('_')[-1]
            user_id = str(update.effective_user.id)
            english_time = user_settings.get(user_id, {}).get('english_time')
            await show_main_menu(update, context, stream, english_time)
            
        elif data.startswith('reminders_settings_'):
            stream = data.split('_')[-1]
            await show_reminders_settings(update, context, stream)
            
        elif data.startswith('set_reminders_time_'):
            stream = data.split('_')[-1]
            await select_reminders_time(update, context, stream)
            
        elif data.startswith('reminders_time_'):
            # –§–æ—Ä–º–∞—Ç: reminders_time_20:00_1
            parts = data.split('_')
            time_str = parts[2]  # 20:00
            stream = parts[3]    # 1
            
            user_id = str(update.effective_user.id)
            if user_id not in user_settings:
                user_settings[user_id] = {}
            user_settings[user_id]['reminders'] = True
            user_settings[user_id]['reminders_time'] = time_str
            save_user_settings(user_settings)
            
            await query.edit_message_text(
                text=f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {time_str}!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"reminders_settings_{stream}")]])
            )
            
        elif data.startswith('reminders_off_'):
            stream = data.split('_')[-1]
            user_id = str(update.effective_user.id)
            if user_id not in user_settings:
                user_settings[user_id] = {}
            user_settings[user_id]['reminders'] = False
            save_user_settings(user_settings)
            await query.edit_message_text(
                text="üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"reminders_settings_{stream}")]])
            )
                
        elif data.startswith('view_tomorrow_hw_'):
            stream = data.split('_')[-1]
            tomorrow_hws = get_homeworks_for_tomorrow(stream)
            
            if not tomorrow_hws:
                text = "üì≠ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"
            else:
                text = "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
                for subject, hw_text in tomorrow_hws:
                    text += f"üìñ {subject}:\n{hw_text}\n\n"
            
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"reminders_settings_{stream}")]])
            )
                
        elif data.startswith('refresh_'):
            stream = data.split('_')[-1]
            if stream in events_cache:
                del events_cache[stream]
            events = load_events_from_github(stream)
            await query.edit_message_text(
                text=f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {stream} –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main_{stream}")]])
            )
            
        elif data.startswith('manage_hw_'):
            stream = data.split('_')[-1]
            await show_manage_hw_menu(update, context, stream)
            
        elif data.startswith('add_hw_'):
            stream = data.split('_')[-1]
            await show_add_hw_menu(update, context, stream)
            
        elif data.startswith('hw_subj_'):
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            # –§–æ—Ä–º–∞—Ç: hw_subj_1_–ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–º–µ—Ç–∞
            parts = data.split('_')
            if len(parts) < 4:
                await query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
                return
                
            stream = parts[2]  # –ü–æ—Ç–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç—Ä–µ—Ç—å–µ–π –ø–æ–∑–∏—Ü–∏–∏
            safe_subject = '_'.join(parts[3:])  # –û—Å—Ç–∞–ª—å–Ω–æ–µ - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            if stream not in ['1', '2']:
                await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ç–æ–∫")
                return

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            subjects = get_unique_subjects(stream)
            original_subject = None
            
            for subject in subjects:
                safe_compare = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø]', '_', subject)
                safe_compare = safe_compare[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                if safe_compare == safe_subject:
                    original_subject = subject
                    break
            
            if not original_subject:
                await query.edit_message_text(
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")]])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
            context.user_data['hw_subject'] = original_subject
            context.user_data['hw_stream'] = stream
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
            await show_date_selection(update, context, stream, original_subject)
            
        elif data.startswith('hw_date_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –î–ó
            parts = data.split('_')
            stream = parts[2]
            
            if parts[3] == 'manual':
                # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã
                context.user_data['hw_step'] = 'enter_date_manual'
                await query.edit_message_text(
                    text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023):",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")]])
                )
            else:
                # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                date_str = parts[3]  # –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                context.user_data['hw_date'] = date_str
                context.user_data['hw_step'] = 'enter_text'
                subject = context.user_data['hw_subject']
                date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
                
                await query.edit_message_text(
                    text=f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î–ó –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}\n"
                         f"üìÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n\n"
                         f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")]])
                )
            
        elif data.startswith('view_all_hw_'):
            stream = data.split('_')[-1]
            await show_all_homeworks(update, context, stream)
            
        elif data.startswith('delete_hw_menu_'):
            stream = data.split('_')[-1]
            await show_delete_hw_menu(update, context, stream)
            
        elif data.startswith('del_hw_'):
            # –§–æ—Ä–º–∞—Ç: del_hw_1_–ø—Ä–µ–¥–º–µ—Ç|–¥–∞—Ç–∞
            parts = data.split('_', 3)
            stream = parts[2]
            hw_key = parts[3]
            
            homeworks = load_homeworks(stream)
            
            if hw_key in homeworks:
                del homeworks[hw_key]
                save_homeworks(stream, homeworks)
                
                await query.edit_message_text(
                    text="‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"delete_hw_menu_{stream}")]])
                )
            else:
                await query.edit_message_text(
                    text="‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"manage_hw_{stream}")]])
                )
            
        elif any(data.startswith(cmd) for cmd in ['today_', 'tomorrow_', 'this_week_', 'next_week_']):
            stream = data.split('_')[-1]
            today = datetime.datetime.now(TIMEZONE).date()
            events = load_events_from_github(stream)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
            user_id = str(update.effective_user.id)
            english_time = user_settings.get(user_id, {}).get('english_time')

            if data.startswith('today_'):
                text = format_day(today, events, stream, english_time)
                if "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text:
                    text = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

            elif data.startswith('tomorrow_'):
                tomorrow = today + datetime.timedelta(days=1)
                text = format_day(tomorrow, events, stream, english_time, is_tomorrow=True)
                if "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text:
                    text = f"üîÑ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"

            elif data.startswith('this_week_'):
                start_date, _ = get_week_range(today)
                text = f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é ({stream} –ø–æ—Ç–æ–∫):\n\n"
                for i in range(5):
                    d = start_date + datetime.timedelta(days=i)
                    text += format_day(d, events, stream, english_time)

            elif data.startswith('next_week_'):
                start_date, _ = get_week_range(today + datetime.timedelta(days=7))
                text = f"‚è≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ({stream} –ø–æ—Ç–æ–∫):\n\n"
                for i in range(5):
                    d = start_date + datetime.timedelta(days=i)
                    text += format_day(d, events, stream, english_time)

            else:
                text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{stream}"),
                 InlineKeyboardButton("üîÑ –ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{stream}")],
                [InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data=f"this_week_{stream}"),
                 InlineKeyboardButton("‚è≠ –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f"next_week_{stream}")],
                [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_settings_{stream}")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"back_to_main_{stream}")]
            ]
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram
            if len(text) > 4000:
                text = text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
                
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query: {e}")
        await query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó
async def handle_homework_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    if not can_manage_homework(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–ó")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    hw_step = context.user_data.get('hw_step')
    
    if hw_step == 'enter_date_manual':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        try:
            date = datetime.datetime.strptime(update.message.text, '%d.%m.%Y').date()
            context.user_data['hw_date'] = date.isoformat()
            context.user_data['hw_step'] = 'enter_text'
            
            subject = context.user_data['hw_subject']
            stream = context.user_data['hw_stream']
            
            await update.message.reply_text(
                f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î–ó –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}\n"
                f"üìÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_hw_{stream}")]])
            )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023):")
        return
    
    elif hw_step == 'enter_text':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –î–ó
        if 'hw_subject' not in context.user_data or 'hw_date' not in context.user_data or 'hw_stream' not in context.user_data:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó")
            return
        
        homework_text = update.message.text
        subject = context.user_data['hw_subject']
        date_str = context.user_data['hw_date']
        stream = context.user_data['hw_stream']
        
        if not homework_text.strip():
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –î–ó —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        added_streams = add_homework_for_both_streams(date, subject, homework_text, stream)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if len(added_streams) == 2:
            message = (f"‚úÖ –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤!\n\n"
                      f"üìñ {subject}\n"
                      f"üìÖ {date.strftime('%d.%m.%Y')}\n"
                      f"üìù {homework_text}")
        else:
            message = (f"‚úÖ –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {stream} –ø–æ—Ç–æ–∫–∞!\n\n"
                      f"üìñ {subject}\n"
                      f"üìÖ {date.strftime('%d.%m.%Y')}\n"
                      f"üìù {homework_text}")
        
        await update.message.reply_text(message)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('hw_subject', None)
        context.user_data.pop('hw_date', None)
        context.user_data.pop('hw_stream', None)
        context.user_data.pop('hw_step', None)
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó —á–µ—Ä–µ–∑ –º–µ–Ω—é")

async def check_updates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    if not is_admin(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
        
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    await check_for_updates()
    await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# === –ó–ê–ü–£–°–ö ===
def main():
    global user_settings, application
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    user_settings = load_user_settings()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("update", check_updates_command))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(CallbackQueryHandler(handle_query))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.User(username=ADMIN_USERNAME), 
        handle_homework_text
    ))
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("=" * 50)
    print("ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
    print(f"üëë –ê–¥–º–∏–Ω: {ADMIN_USERNAME}")
    print("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
    print("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00")
    print("üë§ –ö–æ–º–∞–Ω–¥–∞ /users –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
